class Fabulator::Expr::Parser
  #--
  # based on XSM expression grammer from 
  #    http://cpansearch.perl.org/src/JSMITH/Gestinanna-0.02/parser.PL
  #
  # instead of compiling ruby code, we'll instantiate objects to handle the
  # run-time performance
  #++

  start statements

rule
  statements: statement { result = Fabulator::Expr::StatementList.new; result.add_statement(val[0]) }
    | statements SEMI statement { result = val[0]; result.add_statement(val[2]) }

  statement: 
    | expr
    | let_expr
    | ns_expr { result = nil }

  expr: or_expr
    | range_expr
    | if_expr
    | for_expr
    | quant_expr
    | with_expr
    | err_expr

  err_expr: expr ERR expr { result = Fabulator::Expr::ErrExpr.new(val[0], val[2]) }

  with_expr: expr WITH expr_set_list { result = Fabulator::Expr::WithExpr.new(val[0], val[2]) }

  expr_set_list: expr_set { result = Fabulator::Expr::StatementList.new; result.add_statement(val[0]) }
    | expr_set_list COMMA expr_set { result = val[0]; result.add_statement(val[2]) }

  expr_set: path_expr COLON_EQUAL expr { result = Fabulator::Expr::DataSet.new(val[0], val[2]) }

    #| absolute_location_path COLON_EQUAL expr { result = Fabulator::Expr::DataSet.new(val[0], val[2]) }

  num_expr: additive_expr
    | range_expr

  num_list: num_expr { result = [ val[0] ] }
    | num_list COMMA num_expr { result = val[0] + [ val[2] ] }

  let_expr: LET DOLLAR_QNAME COLON_EQUAL expr { result = Fabulator::Expr::LetExpr.new(val[1], val[3]) }

  ns_expr: LET XMLNS_COLON_NCNAME COLON_EQUAL LITERAL { 
    @context.set_ns(val[1].gsub(/^xmlns:/, ''), val[3])
  } 

  if_expr: IF LP expr RP THEN expr ELSE expr { result = Fabulator::Expr::IfExpr.new(val[2], val[5], val[7]) }
    | IF LP expr RP THEN expr { result = Fabulator::Expr::IfExpr.new(val[2], val[5], nil) }

  for_expr: FOR for_vars RETURN expr { result = Fabulator::Expr::ForExpr.new(val[1], val[3]) }

  for_vars: for_var { result = [ val[0] ] }
    | for_vars COMMA for_var { result = val[0] + [ val[2] ] }

  for_var: DOLLAR_QNAME IN expr { result = Fabulator::Expr::ForVar.new(val[0], val[2]) }

  quant_expr: SOME for_vars SATISFIES expr { result = Fabulator::Expr::SomeExpr.new(val[1], val[3]) }
    | EVERY for_vars SATISFIES expr { result = Fabulator::Expr::EveryExpr.new(val[1], val[3]) }

  or_expr: and_expr
    | or_expr OR and_expr { result = Fabulator::Expr::OrExpr.new(val[0], val[2]) }

  and_expr: equality_expr
    | and_expr AND equality_expr { result = Fabulator::Expr::AndExpr.new(val[0], val[2]) }
    | and_expr EXCEPT equality_expr { result = Fabulator::Expr::ExceptExpr.new(val[0], val[2]) }

  equality_expr: relational_expr
    | additive_expr EQ additive_expr { result = Fabulator::Expr::EqExpr.new(val[0], val[2]) }
    | additive_expr NEQ additive_expr { result = Fabulator::Expr::NeqExpr.new(val[0], val[2]) }

  tuple: LB args RB { result = Fabulator::Expr::Tuple.new(val[1]) }

#    | LT args GT { result = Fabulator::Expr::Tuple.new(val[1]) }

  relational_expr: additive_expr
    | additive_expr LT additive_expr { result = Fabulator::Expr::LtExpr.new(val[0], val[2]) }
    | additive_expr GT additive_expr { result = Fabulator::Expr::LtExpr.new(val[2], val[0]) }
    | additive_expr LTE additive_expr { result = Fabulator::Expr::LteExpr.new(val[0], val[2]) }
    | additive_expr GTE additive_expr { result = Fabulator::Expr::LteExpr.new(val[2], val[0]) }

#    | additive_expr LT additive_expr LT additive_expr { result = Fabulator::Expr::Between.new(val[2], val[0], val[4]) }
#    | additive_expr LT additive_expr LTE additive_expr { }
#    | additive_expr LTE additive_expr LT additive_expr { }
#    | additive_expr LTE additive_expr LTE additive_expr { }
#    | additive_expr GT additive_expr GT additive_expr { result = Fabulator::Expr::Between.new(val[2], val[4], val[0]) }
#    | additive_expr GT additive_expr GTE additive_expr { }
#    | additive_expr GTE additive_expr GT additive_expr { }
#    | additive_expr GTE additive_expr GTE additive_expr { }

  range_expr: additive_expr DOT_DOT additive_expr { result = Fabulator::Expr::RangeExpr.new(val[0], val[2]) }
    | additive_expr TO additive_expr { result = Fabulator::Expr::RangeExpr.new(val[0], val[2]) }

  additive_expr: multiplicative_expr
    | additive_expr PLUS multiplicative_expr { result = Fabulator::Expr::AddExpr.new(val[0], val[2]) }
    | additive_expr MINUS multiplicative_expr { result = Fabulator::Expr::SubExpr.new(val[0], val[2]) }

  multiplicative_expr: unary_expr
    | multiplicative_expr STAR unary_expr { result = Fabulator::Expr::MpyExpr.new(val[0], val[2]) }
    | multiplicative_expr DIV unary_expr { result = Fabulator::Expr::DivExpr.new(val[0], val[2]) }
    | multiplicative_expr MOD unary_expr { result = Fabulator::Expr::ModExpr.new(val[0], val[2]) }

  unary_expr: union_expr
    | MINUS unary_expr { result = Fabulator::Expr::NegExpr.new(val[1]) }

  union_expr: path_expr
    | union_expr_x { result = Fabulator::Expr::UnionExpr.new(val[0]) }

  union_expr_x: path_expr PIPE path_expr { result = [ val[0], val[2] ] }
    | union_expr_x PIPE path_expr { result = val[0] + [ val[2] ] }

  path_expr: location_path { result = Fabulator::Expr::PathExpr.new(nil, [], val[0]) } #result = Fabulator::Expr::PathExpr.new(nil, [], val[0]) }
    | primary_expr predicates segment { result = ((val[1].nil? || val[1].empty?) && (val[2].nil? || val[2].empty?)) ? val[0] : Fabulator::Expr::PathExpr.new(val[0], val[1], val[2]) }

  segment:
    | SLASH relative_location_path { result = val[1] }
    | SLASH_SLASH relative_location_path { result = [ Fabulator::Expr::AxisDescendentOrSelf.new ] + val[1] }

  location_path: relative_location_path 
    | absolute_location_path

  # / => local data root
  # // => local data descendent or self

  absolute_location_path: SLASH { result = Fabulator::Expr::RootContext.new }
    | SLASH relative_location_path { result = Fabulator::Expr::PathExpr.new(Fabulator::Expr::RootContext.new, [], val[1]) }
    | SLASH_SLASH relative_location_path { result = [ Fabulator::Expr::RootContext.new, Fabulator::Expr::AxisDescendentOrSelf.new(val[1][0]) ] + val[1][1..val[1].size-1] }
    | axis_name SLASH relative_location_path { result = [ Fabulator::Expr::RootContext.new(val[0]) ] + val[2] }
    | axis_name SLASH_SLASH relative_location_path { result = [ Fabulator::Expr::RootContext.new(val[0]), Fabulator::Expr::AxisDescendentOrSelf.new(val[2][0]) ] + val[2][1..val[2].size-1] }

  relative_location_path: step { result = [ val[0] ] }
    | relative_location_path SLASH step { result = val[0] + [ val[2] ] }
    | relative_location_path SLASH_SLASH step { result = val[0] + [ Fabulator::Expr::AxisDescendentOrSelf.new(val[2]) ] }

  step: axis predicates { result = val[1].nil? || val[1].empty? ? val[0] : Fabulator::Expr::Predicates.new(val[0], val[1]) }
    | DOT { result = Fabulator::Expr::CurrentContext.new }
    | DOT_DOT { result = Fabulator::Expr::AxisParent.new }

    #| AXIS_METHOD COLON_COLON node_test predicates { result = Fabulator::Expr::Predicates.new(Fabulator::Expr::Function.new(@context, val[2], []), val[3]) }
    #| AXIS_METHOD COLON_COLON FUNCTION_NAME list predicates { result = Fabulator::Expr::Predicates.new(Fabulator::Expr::Function.new(@context, val[2], val[3]), val[4]) }
    #| axis LC DOLLAR_QNAME RC predicates { result = Fabulator::Expr::Predicates.new(Fabulator::Expr::Step.new(val[0], Fabulator::Expr::QName.new(val[3])), val[4]) }

  axis: node_test { result = Fabulator::Expr::AxisChild.new(val[0]) }
    | axis_name node_test { result = Fabulator::Expr::Axis.new(val[0], val[1]) }
    | AT node_test { result = Fabulator::Expr::AxisAttribute.new(val[1]) }

  axis_name: AXIS_NAME COLON_COLON { result = Fabulator::Expr::Axis.new(val[0]) }

  predicates: { result = [ ] }
    | predicates predicate { result = val[0] + [ val[1] ] }

  predicate: LB expr RB { result = val[1] }
    | LB num_list RB { result = val[1] }

      #Fabulator::Expr::IndexPredicate.new(val[1]) 

    #| '<' expr '>'
  primary_expr:
    DOLLAR_QNAME { result = Fabulator::Expr::Var.new(val[0]) }
    | LP expr RP { result = val[1] }
    | list
    | bag
    | tuple
    | LITERAL { result = Fabulator::Expr::Literal.new(val[0], [ Fabulator::FAB_NS, 'string' ]) }
    | NUMBER { result = Fabulator::Expr::Literal.new(val[0] =~ /\./ ? val[0].to_d.to_r : val[0].to_i.to_r, [ Fabulator::FAB_NS, 'numeric' ]) }
    | FUNCTION_NAME list { 
        result = Fabulator::Expr::Function.new(@context, val[0], val[1]) 
#          when 'any' : Fabulator::Expr::AnyExpr.new(@context, val[1])
#          when 'all' : Fabulator::Expr::AllExpr.new(@context, val[1])
#          when 'one' : Fabulator::Expr::OneExpr.new(@context, val[1])
#          when 'none': Fabulator::Expr::NoneExpr.new(@context, val[1])
#          else Fabulator::Expr::Function.new(@context, val[0], val[1]) 
#        end
    }

  list: LP opt_args RP { result = Fabulator::Expr::List.new(val[1]) }
  
  bag: LP_LC bag_kv_pairs RC_RP { result = Fabulator::Expr::Bag.new(val[1]) }
  
  bag_kv_pairs: bag_kv_pair { result = [ val[0] ] }
    | bag_kv_pairs COMMA bag_kv_pair { result = val[0] + [ val[2] ] }

  bag_kv_pair: CONST_PATH expr { result = [ val[0], val[1] ] }

  opt_args: { result = [ ] }
    | args 

  args: expr { result = [ val[0] ] }
    | args COMMA expr { result = val[0] + [ val[2] ] }

  node_test: QNAME
    | NUMBER { result = val[0].to_s }
    | LC expr RC { result = val[1] }
    | STAR

end

---- inner 
  # == Fabulator Expression Parser
  #
  # <tt>Fabulator::Expr::Parser</tt> provides a parser for Fabulator
  # expressions operating on a DOM-like data model provided by
  # Fabulator::Expr::Context and Fabulator::Expr::Node.
  #
  # The expression language is based on XQuery and XPath.
  #

  require 'fabulator/expr'
  require 'rational'
  require 'bigdecimal'
  require 'bigdecimal/util'

  # Within the context of a Fabulator::Expr::Context object, this will
  # parse the given string and return an object that can be run to return
  # an array if Fabulator::Expr::Node objects.
  #
  # Example:
  #
  #   parser  = Fabulator::Expr::Parser.new
  #   context = Fabulator::Expr::Context.new
  #   expr    = parser.parse('//foo', context)
  #   foos    = expr.run(context)
  #
  # Results in 'foos' being an array of all of the nodes in the
  # context that are named 'foo' regardless of their depth in the
  # node tree.
  def parse(text, context)
    @source = text
    @curpos = 0
    @context = context.merge
    @line = 0
    @col = 0

    @yydebug = true

    @last_token = nil

    do_parse
  end

  # Used internally by the parser to raise a Fabulator::Expr::ParserError
  # when the parse fails.
  def on_error(*args)
    raise Fabulator::Expr::ParserError.new("unable to parse '#{args[1]}' near line #{@line + 1}, column #{@col}")
  end


  @@regex = {
    :simple_tokens => %r{\.\.|::|!=|>=|<=|\/\/|:=|\(\{|\}\)|\.|@|[*]|\(|\)|\[|\]|\{|\}|\/|\||\+|-|=|>|<|&|,|;},
    :ncname => %r{(?:[a-zA-Z_][-a-zA-Z0-9_.]*)},
    :event_type => %r{(?:processing-instruction|comment|text|node)},
    :axis_name => %r{(?:attribute|child|child-or-self|descendant|descendant-or-self|method|self)},
    :namespace_name => %r{(?:context|global|local|session|universal)},
    :number => %r{(-?\d+(?:\.\d+)?|\.\d+)},
    :literal => %r{((?:"(?:[^\\"]*(?:\\.[^\\"]*)*)")|(?:'(?:[^\\']*(?:\\.[^\\']*)*)'))},
  }

  @@regex[:axis] = %r{(#{@@regex[:ncname]})\s*(?=::)}
  @@regex[:name_colon_star] = %r{(#{@@regex[:ncname]}:\*)}
  @@regex[:qname] = %r{((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})}
  @@regex[:ncname_or_int] = %r{(?:#{@@regex[:ncname]}|\d+)}
  @@regex[:const_path] = %r{((?:#{@@regex[:ncname_or_int]}/)*#{@@regex[:ncname_or_int]}):\s}
  @@regex[:xmlns] = %r{((?:xmlns:)#{@@regex[:ncname]})}
  @@regex[:dollar_qname] = %r{\$#{@@regex[:qname]}}
  @@regex[:dollar_int] = %r{\$([0-9]+)}
  @@regex[:function_name] = %r{#{@@regex[:qname]}\??\*?\s*(?=\([^:])}

  @@ops = {
    '..' => :DOT_DOT,
    '::' => :COLON_COLON,
    '!=' => :NEQ,
    '>=' => :GTE,
    '<=' => :LTE,
    '//' => :SLASH_SLASH,
    ':=' => :COLON_EQUAL,
    '({' => :LP_LC,
    '})' => :RC_RP,
    '.'  => :DOT,
    '@'  => :AT,
    '*'  => :STAR,
    '('  => :LP,
    ')'  => :RP,
    '['  => :LB,
    ']'  => :RB,
    '{'  => :LC,
    '}'  => :RC,
    '/'  => :SLASH,
    '|'  => :PIPE,
    '+'  => :PLUS,
    '-'  => :MINUS,
    '='  => :EQ,
    '>'  => :GT,
    '<'  => :LT,
    '&'  => :AMP,
    ','  => :COMMA,
    ';'  => :SEMI
  }

  @@preceding_tokens = { }
  [%{
    @ :: ( 
    and or mod div 
    * 
    / // | + - = != < <= > >=
    == & && ||
  }.split(/\s*/), '[', ',', '$' ].each { |t| @@preceding_tokens[t] = true }

  @@regex[:general] = Regexp.compile(%{^(?:#{@@regex[:const_path]}|#{@@regex[:xmlns]}|#{@@regex[:function_name]}|#{@@regex[:axis]}|#{@@regex[:name_colon_star]}|#{@@regex[:qname]}|#{@@regex[:literal]}|#{@@regex[:number]}|#{@@regex[:dollar_qname]}|#{@@regex[:dollar_int]}|(#{@@regex[:simple_tokens]}))})
  
  
  def next_token  
    @token = nil
    white_space = 0
    new_line = 0
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end

    # skip comments delimited by (:  :)
    # comments can be nested
    # these are XPath 2.0 comments
    #
    if @curpos < @source.length && @source[@curpos..@curpos+1] == '(:'
      comment_depth = 1
      @curpos = @curpos + 2
      @col = @col + 2
      while comment_depth > 0 && @curpos < @source.length
        if @source[@curpos..@curpos+1] == '(:'
          comment_depth = comment_depth + 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        if @source[@curpos..@curpos+1] == ':)'
          comment_depth = comment_depth - 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        @curpos = @curpos + 1
        @col = @col + 1
      end
      white_space = white_space + 1
    end

    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
        
    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    #if new_line > 0 || white_space > 0
    #  @token = [ :SP, '' ]
    #end

    if @token.nil? && @last_token && ! @@preceding_tokens[@last_token[1]]
      if @source[@curpos..@curpos] == '*'
        @token = [ :STAR, '*' ]
      else
        if @source[@curpos..@source.length-1] =~ /^(#{@@regex[:ncname]})/
          ncname = $1
          case ncname
            when 'for'
              @token = [ :FOR, 'for' ]
            when 'return'
              @token = [ :RETURN, 'return' ]
            when 'in'
              @token = [ :IN, 'in' ]
            when 'let'
              @token = [ :LET, 'let' ]
            when 'except'
              @token = [ :EXCEPT, 'except' ]
            when 'every'
              @token = [ :EVERY, 'every' ]
            when 'some'
              @token = [ :SOME, 'some' ]
            when 'satisfies'
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if'
              @token = [ :IF, 'if' ]
            when 'then'
              @token = [ :THEN, 'then' ]
            when 'else'
              @token = [ :ELSE, 'else' ]
            when 'to'
              @token = [ :TO, 'to' ]
            when 'and'
              @token = [ :AND, 'and' ]
            when 'or'
              @token = [ :OR, 'or' ]
            when 'mod'
              @token = [ :MOD, 'mod' ]
            when 'div'
              @token = [ :DIV, 'div' ]
            when 'err'
              @token = [ :ERR, 'err' ]
            #when '*doh*':
            #  # do nothing
            #  @token = nil
            else
              @token = nil
          end
        end
      end
    end
 
    if @token.nil? && @source[@curpos..@curpos+1] == '..'
      @token = [ :DOT_DOT, '..' ]
    end

    if @token.nil?
      if @curpos >= @source.length
        @token = [false, false]
        return @token
      end

      res = @@regex[:general].match(@source[@curpos..@source.length-1])
      #@source[@curpos..@source.length-1] =~ @@regex[:general]
      #res = [ nil, $1, $2, $3, $4, $5, $6, $7, $8 ]
      if res.nil?
        raise "Failed to parse '#{@source}' at #{@curpos}': #{@source[@curpos..@source.length-1]}"
      else
        if !res[1].nil?
          @token = [ :CONST_PATH, res[1].gsub(/:\s^/, '') ]
          @curpos += 2
        elsif !res[2].nil?
          @token = [ :XMLNS_COLON_NCNAME, res[2] ]
        elsif !res[3].nil?
          if res[3] == 'if'
            @token = [ :IF, 'if' ]
          else
            if @source[@curpos+res[3].length .. @curpos+res[3].length + 1] =~ /^(\??\*?)/
              @token = [ :FUNCTION_NAME, res[3]+$1 ]
            else
              @token = [ :FUNCTION_NAME, res[3] ]
            end
          end
        elsif !res[4].nil?
          @token = [ res[4] == 'method' ? :AXIS_METHOD : :AXIS_NAME, res[4] ]
        elsif !res[5].nil?
          @token = [ :NAME_COLON_STAR, res[5] ]
        elsif !res[6].nil?
          qname = res[6]
          case qname
            when 'for'
              @token = [ :FOR, 'for' ]
            when 'return'
              @token = [ :RETURN, 'return' ]
            when 'in'
              @token = [ :IN, 'in' ]
            when 'let'
              @token = [ :LET, 'let' ]
            when 'except'
              @token = [ :EXCEPT, 'except' ]
            when 'every'
              @token = [ :EVERY, 'every' ]
            when 'some'
              @token = [ :SOME, 'some' ]   
            when 'satisfies'
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if'
              @token = [ :IF, 'if' ]
            when 'then'
              @token = [ :THEN, 'then' ]
            when 'else'
              @token = [ :ELSE, 'else' ]
            when 'with'
              @token = [ :WITH, 'with' ]
            when 'err'
              @token = [ :ERR, 'err' ]
            else
              @token = [ :QNAME, qname ]
          end
        elsif !res[7].nil?
          s = res[7]
          @curpos = @curpos + s.length
          @col = @col + s.length
          s = s[1..s.length-2]
          s.gsub!(/\\n/, "\n")
          s.gsub!(/\\'/, "'")
          s.gsub!(/\\"/, '"')
          @line += s.split(/\n/).count
          @curpos = @curpos - s.length
          @col = @col - s.length
          @token = [ :LITERAL, s ]
        elsif !res[8].nil?
          @token = [ :NUMBER, res[8] ]
        elsif !res[9].nil?
          @curpos = @curpos + 1
          @col = @col + 1
          @token = [ :DOLLAR_QNAME, res[9] ]
        elsif !res[10].nil?
          @curpos = @curpos + 1
          @col = @col + 1
          @token = [ :DOLLAR_QNAME, res[10] ]
        elsif !res[11].nil?
          @token = [ @@ops[res[11]] || res[11], res[11] ]
        else
          raise "Failed to parse '#{@source}' at #{@curpos}: #{@source[@curpos..@source.length-1]}"
        end
      end
    end

    if !@token[1].nil?
      @curpos = @curpos + @token[1].length
      @col = @col + @token[1].length
    end
    #puts "#{@token.first} => #{@token.last}"
    @last_token = @token
    return @token
  end
